version: 2.1
# -=Environment Variable in CircleCI's Project Settings=-
# AWS_ACCESS_KEY_ID AWS_DEFAULT_REGION AWS_ECR_REGISTRY_ID AWS_SECRET_ACCESS_KEY
# keys for ECR/docker uploads

references:
  default: &default
    working_directory: ~/project

orbs:
  aws-ecr: circleci/aws-ecr@8.1.2

jobs:
  back_to_ecr:
    environment:
      DOCKER_BUILDKIT: true
      PIPELINE_NUMBER: << pipeline.number >>
    docker:
      - image: cimg/base:2022.06
    steps:
      - setup_remote_docker
      - checkout
      - aws-ecr/build-and-push-image:
          repo: 'holidays-api-backend'
          region: ap-northeast-1
          tag: '${CIRCLE_BRANCH}-${PIPELINE_NUMBER},${CIRCLE_BRANCH}-latest'
          extra-build-args: >
            --label build_number=<< pipeline.number >>
            --label commit_sha=${CIRCLE_SHA1}
            --target back-deploy
          dockerfile: docker/back/Dockerfile

  front_to_ecr:
    environment:
      DOCKER_BUILDKIT: true
      PIPELINE_NUMBER: << pipeline.number >>
    docker:
      - image: cimg/base:2022.06
    steps:
      - setup_remote_docker
      - checkout
      - aws-ecr/build-and-push-image:
          repo: 'holidays-api-frontend'
          region: ap-northeast-1
          tag: '${CIRCLE_BRANCH}-${PIPELINE_NUMBER},${CIRCLE_BRANCH}-latest'
          extra-build-args: >
            --build-arg ENV_FILE=$([[ "$CIRCLE_BRANCH" = "dev" ]] && echo .env.stage.front || echo .env.prod.front)
            --label build_number=<< pipeline.number >>
            --label commit_sha=${CIRCLE_SHA1}
            --target front-deploy
          dockerfile: docker/front/Dockerfile

  build:
    <<: *default
    docker:
      - image: cimg/ruby:2.7.7-browsers
        environment:
          RAILS_ENV: test
          BUNDLE_PATH: vendor/bundle
          HOLIDAYS_API_BUCKET: revenue-staging-uploads
    steps:
      - checkout
      # - run:
      #     name: Install system dependencies
      #     command: |
      #       sudo apt-get update -qq && sudo apt-get install -y unzip libnss3 google-chrome-stable
      - run:
          name: Setup env
          command: cp .env.ci.example .env
      - restore_cache:
          name: Restore bundle cache
          keys:
            - v4-holidays-api-bundle-{{ checksum "backend/Gemfile.lock" }}-{{ arch }}
            - v4-holidays-api-bundle-
      - run:
          name: Bundle install
          command: cd backend && bundle check --path vendor/bundle || bundle install --path=vendor/bundle --jobs 4 --retry 3
      - save_cache:
          name: Store bundle cache
          key: v4-holidays-api-bundle-{{ checksum "backend/Gemfile.lock" }}-{{ arch }}
          paths:
            - backend/vendor/bundle
      - persist_to_workspace:
          root: .
          paths: .
  spec:
    <<: *default
    docker:
      - image: cimg/ruby:2.7.7-browsers
        environment:
          RAILS_ENV: test
          BUNDLE_PATH: vendor/bundle
          HOLIDAYS_API_BUCKET: revenue-staging-uploads
          DB_HOST: 127.0.0.1
          DB_PORT: 5432
      - image: circleci/postgres:11.5-ram
    steps:
      - attach_workspace:
          at: .
#      - run:
#          name: Run Bundle audit
#          when: always
#          command: |
#            bundle exec bundle-audit check --update
#      - run:
#          name: Run Rails best practices
#          when: always
#          command: |
#            bundle exec rails_best_practices .
      - run:
          name: Set bundle path
          command: cd backend && bundle --path vendor/bundle
      - run:
          name: Run Rubocop
          when: always
          command: |
            cd backend && bundle exec rubocop
      - run:
          name: Setup db and other stuff
          when: always
          command: |
            cd backend && bundle exec rails db:create db:migrate
      - run:
          name: Run RSpec
          when: always
          command: |
            cd backend && bundle exec rspec --profile 10 \
                              --out test_results/rspec/results.xml \
                              --format doc
#      - store_artifacts:
#          path: coverage
#          destination: coverage

workflows:
  version: 2
  build_and_test:
    jobs:
      - build
      - spec:
          requires:
            - build
      - deploy_approval:
          # requires:
          #   - spec
          type: approval
          filters:
            branches:
              only:
                - dev
                - main
      - back_to_ecr:
          requires:
            - deploy_approval
      - front_to_ecr:
          requires:
            - deploy_approval
