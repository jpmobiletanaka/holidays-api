version: 2.1
references:
  default: &default
    working_directory: ~/project

orbs:
  aws-ecr: circleci/aws-ecr@3.1.0
  aws-ecs: circleci/aws-ecs@0.0.7
  aws-cli: circleci/aws-cli@0.1.13
commands:
  verify-migration:
    description: 'Verify migration task completed successfully'
    parameters:
      task-arn:
        type: string
      cluster-name:
        type: string
      max-poll-attempts:
        type: integer
        default: 50
      poll-interval:
        type: integer
        default: 5
    steps:
      - run:
          name: Verify migration
          command: |
             attempt=0

             TASK_ARN="$(echo << parameters.task-arn >>)"

             while [ "$attempt" -lt << parameters.max-poll-attempts >> ]

             do

                 STATUS=$(aws ecs describe-tasks --cluster << parameters.cluster-name >> --tasks ${TASK_ARN} \
                                         --query="tasks[0].containers[0].lastStatus")
                 EXIT_CODE=$(aws ecs describe-tasks --cluster << parameters.cluster-name >> --tasks ${TASK_ARN} \
                                        --query="tasks[0].containers[0].exitCode")
                 echo "Task '$TASK_ARN' status is: $STATUS"

                 if [[ "$STATUS" == *"STOPPED"* ]]; then
                   if [ "$EXIT_CODE" == "0" ]; then
                     echo "Task definition ${TASK_ARN} completed successfully"
                     exit 0
                   else
                     echo "Task definition ${TASK_ARN} completed with error"
                     exit 1
                   fi
                 fi

                 echo "Cooling down for << parameters.poll-interval >> seconds"
                 sleep << parameters.poll-interval >>

                 attempt=$((attempt + 1))

             done

             echo "Maximum retries << parameters.max-poll-attempts >> exceeded. Exiting"
             exit 1
jobs:
  build:
    <<: *default
    docker:
      - image: cimg/ruby:2.7.7-browsers
        environment:
          RAILS_ENV: test
          BUNDLE_PATH: vendor/bundle
          HOLIDAYS_API_BUCKET: revenue-staging-uploads
    steps:
      - checkout
#      - run:
#          name: Install system dependencies
#          command: |
#            sudo apt-get update -qq && sudo apt-get install -y unzip libnss3 google-chrome-stable
      - run:
          name: Setup env
          command: cp .env.ci.example .env
      - restore_cache:
          name: Restore bundle cache
          keys:
            - v4-holidays-api-bundle-{{ checksum "backend/Gemfile.lock" }}-{{ arch }}
            - v4-holidays-api-bundle-
      - run:
          name: Bundle install
          command: cd backend && bundle check --path vendor/bundle || bundle install --path=vendor/bundle --jobs 4 --retry 3
      - save_cache:
          name: Store bundle cache
          key: v4-holidays-api-bundle-{{ checksum "backend/Gemfile.lock" }}-{{ arch }}
          paths:
            - backend/vendor/bundle
      - persist_to_workspace:
          root: .
          paths: .
  spec:
    <<: *default
    docker:
      - image: cimg/ruby:2.7.7-browsers
        environment:
          RAILS_ENV: test
          BUNDLE_PATH: vendor/bundle
          HOLIDAYS_API_BUCKET: revenue-staging-uploads
          DB_HOST: 127.0.0.1
          DB_PORT: 5432
      - image: circleci/postgres:11.5-ram
    steps:
      - attach_workspace:
          at: .
      #      - run:
#          name: Run Bundle audit
#          when: on_success
#          command: |
#            bundle exec bundle-audit check --update
#      - run:
#          name: Run Rails best practices
#          when: always
#          command: |
#            bundle exec rails_best_practices .
      - run:
          name: Set bundle path
          command: cd backend && bundle --path vendor/bundle
      - run:
          name: Run Rubocop
          when: always
          command: |
            cd backend && bundle exec rubocop
      - run:
          name: Setup db and other stuff
          when: always
          command: |
            cd backend && bundle exec rails db:create db:migrate
      - run:
          name: Run RSpec
          when: always
          command: |
            cd backend && bundle exec rspec --profile 10 \
                              --out test_results/rspec/results.xml \
                              --format doc
#      - store_artifacts:
#          path: coverage
#          destination: coverage
  build_image:
    <<: *default
    docker:
      - image: circleci/ruby:2.5.5-stretch-node-browsers
    environment:
      AWS_DEFAULT_OUTPUT: json
      RAILS_ENV: staging
    steps:
      - checkout
      - attach_workspace:
          at: .
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Setup Python
          command: |
            sudo apt-get update -qq && sudo apt-get install python python-dev
      - aws-cli/install
      - aws-cli/configure:
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
          aws-region: AWS_DEFAULT_REGION
      - run:
          name: Setup environment
          command: |
            mv config/database.ci.yml config/database.yml
      - run:
          name: Bundle install for deployment
          command: bundle check --path vendor/bundle || bundle install --without development test --path vendor/bundle --jobs 4 --retry 3
      - run:
          name: Precompile assets
          command: |
            RAILS_ENV=staging DB_ADAPTER=nulldb bundle exec rake assets:precompile
      - run:
          name: ECR login
          command: |
            eval $(aws ecr get-login --region $AWS_DEFAULT_REGION --no-include-email)
      - run:
          name: Build docker image
          command: |
            docker build . -t $CIRCLE_PROJECT_REPONAME/app:latest -f docker/web/Dockerfile.ecs
      - run:
          name: Show docker image
          command: docker images
      - run:
          name: Save docker image
          command: |
            mkdir -p docker/images
            docker save $CIRCLE_PROJECT_REPONAME/app > docker/images/app.tar
      - persist_to_workspace:
          root: .
          paths:
            - docker/images

  deploy:
    docker:
      - image: circleci/python:3.6.1
    environment:
      AWS_DEFAULT_OUTPUT: json
      RAILS_ENV: staging
    steps:
      - setup_remote_docker
      - attach_workspace:
          at: .
      - aws-cli/install
      - aws-cli/configure:
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
          aws-region: AWS_DEFAULT_REGION
      - run:
          name: Load image
          command: |
            docker load --input docker/images/app.tar
      - run:
          name: Setup common environment variables
          command: |
            echo 'export ECS_CLUSTER_NAME="${AWS_RESOURCE_NAME_PREFIX}-${RAILS_ENV}"' >> $BASH_ENV
            echo 'export ECS_WEB_SERVICE_NAME="${AWS_RESOURCE_NAME_PREFIX}-${RAILS_ENV}-web"' >> $BASH_ENV
            echo 'export ECS_WEB_TASK_FAMILY="${AWS_RESOURCE_NAME_PREFIX}-${RAILS_ENV}-web"' >> $BASH_ENV
            echo 'export ECS_WEB_CONTAINER_NAME="${AWS_RESOURCE_NAME_PREFIX}-${RAILS_ENV}-web"' >> $BASH_ENV
            echo 'export DOCKER_REPOSITORY="${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${AWS_RESOURCE_NAME_PREFIX}"' >> $BASH_ENV
            source $BASH_ENV
      - run:
          name: Tag docker image `latest`
          command: |
            docker tag $CIRCLE_PROJECT_REPONAME/app:latest $DOCKER_REPOSITORY:$CIRCLE_SHA1
            docker tag $DOCKER_REPOSITORY:$CIRCLE_SHA1 $DOCKER_REPOSITORY:latest
      - run:
          name: Push image
          command: |
            eval $(aws ecr get-login --region $AWS_DEFAULT_REGION --no-include-email)
            docker push $DOCKER_REPOSITORY
      - run:
          name: Run migrations
          command : |
            MIGRATOR_TASK_ARN=$(aws ecs run-task --cluster $ECS_CLUSTER_NAME \
            --task-definition $AWS_RESOURCE_NAME_PREFIX-$RAILS_ENV-migrator \
            --query="tasks[0].taskArn")
            echo "export MIGRATOR_TASK_ARN=$MIGRATOR_TASK_ARN" >> $BASH_ENV
            source $BASH_ENV
      - verify-migration:
          task-arn: ${MIGRATOR_TASK_ARN}
          cluster-name: ${ECS_CLUSTER_NAME}
      - run:
          name: Get last task definition
          command: >
            TASK_DEFINITION_ARN=$(aws ecs describe-task-definition \
                --task-definition $AWS_RESOURCE_NAME_PREFIX-$RAILS_ENV-migrator \
                --output text \
                --query 'taskDefinition.taskDefinitionArn')
            echo "export TASK_DEFINITION_ARN='${TASK_DEFINITION_ARN}'" >> $BASH_ENV
      - aws-ecs/update-service:
          family: "${ECS_WEB_TASK_FAMILY}"
          cluster-name: "${ECS_CLUSTER_NAME}"
          service-name: "${ECS_WEB_SERVICE_NAME}"
          container-image-name-updates: "container=${ECS_WEB_CONTAINER_NAME},image-and-tag=${DOCKER_REPOSITORY:latest}"
#          container-env-var-updates: "container=${ECS_WEB_CONTAINER_NAME},name=VERSION_INFO,value=${CIRCLE_SHA1}_${CIRCLE_BUILD_NUM},container=${ECS_WEB_CONTAINER_NAME},name=BUILD_DATE,value=\"$(date)\""
          container-env-var-updates: "container=${ECS_WEB_CONTAINER_NAME},name=SECRET_KEY_BASE,value=${SECRET_KEY_BASE}"
          verify-revision-is-deployed: true
      - aws-ecs/update-service:
          family: "${ECS_SIDEKIQ_TASK_FAMILY}"
          cluster-name: "${ECS_CLUSTER_NAME}"
          service-name: "${ECS_SIDEKIQ_SERVICE_NAME}"
          container-image-name-updates: "container=${ECS_SIDEKIQ_CONTAINER_NAME},image-and-tag=${DOCKER_REPOSITORY:latest}"
#          container-env-var-updates: "container=${ECS_SIDEKIQ_CONTAINER_NAME},name=VERSION_INFO,value=${CIRCLE_SHA1}_${CIRCLE_BUILD_NUM},container=${ECS_SIDEKIQ_CONTAINER_NAME},name=BUILD_DATE,value=\"$(date)\""
          container-env-var-updates: "container=${ECS_SIDEKIQ_CONTAINER_NAME},name=SECRET_KEY_BASE,value=${SECRET_KEY_BASE}"
          verify-revision-is-deployed: true
#      - run:
#          name: Test deployment (Please manually tear down AWS resources after use, if desired)
#          command: |
#            TARGET_GROUP_ARN=$(aws ecs describe-services --cluster $ECS_CLUSTER_NAME --services $ECS_SERVICE_NAME | jq -r '.services[0].loadBalancers[0].targetGroupArn')
#            ELB_ARN=$(aws elbv2 describe-target-groups --target-group-arns $TARGET_GROUP_ARN | jq -r '.TargetGroups[0].LoadBalancerArns[0]')
#            ELB_DNS_NAME=$(aws elbv2 describe-load-balancers --load-balancer-arns $ELB_ARN | jq -r '.LoadBalancers[0].DNSName')
#            # Test multiple times to verify that the new revision has been deployed across the entire cluster
#            for attempt in {1..50}; do
#              curl -s --retry 10 http://$ELB_DNS_NAME | grep -E "Hello World!.*${CIRCLE_SHA1}_${CIRCLE_BUILD_NUM}"

workflows:
  version: 2
  build_and_test:
    jobs:
      - build
      - spec:
          requires:
            - build
#      - build_image:
#          filters:
#            branches:
#              only:
#                - development
#                - research/aws_ecs_test
#          requires:
#            - build
#      - deploy:
#          filters:
#            branches:
#              only:
#                - development
#                - research/aws_ecs_test
#          requires:
##            - spec
#            - build_image
